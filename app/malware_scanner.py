import os
import clamd
import io
from werkzeug.datastructures import FileStorage
from logger_factory import LoggerFactory

LOGGER_LEVEL = os.environ.get("LOGGER_LEVEL", "INFO")
logger = LoggerFactory.get_logger(__name__, log_level=LOGGER_LEVEL)


class MalwareScanner(object):
    @classmethod
    def scan(cls, fs: FileStorage) -> bool:
        try:
            cd = clamd.ClamdNetworkSocket(
                host="local-clamav-server", port=3310, timeout=30
            )
            data = fs.stream.read()
            if not data:
                logger.info("MalwareScanner.scan(): empty data")
                return False
            result = cd.instream(io.BytesIO(data))
            if not result:
                logger.info("MalwareScanner.scan(): empty result")
                raise Exception("Unknown error")
            for key, values in result.items():
                if values[0].upper() == "FOUND":
                    logger.warning(
                        "MalwareScanner.scan(): detected suspicious data (%s: %s)",
                        key,
                        values[1],
                    )
                    return True
            else:
                logger.info("MalwareScanner.scan(): not detected")
                return False
        except clamd.BufferTooLongError:
            logger.error("MalwareScanner.scan(): BufferTooLongError", exc_info=True)
            raise
        except clamd.ConnectionError:
            logger.error("MalwareScanner.scan(): ConnectionError", exc_info=True)
            raise
        except Exception:
            logger.error("MalwareScanner.scan(): Exception", exc_info=True)
            raise
