import argparse
from enum import Enum
from urllib.parse import urlparse

MAX_SIG_STR_LENGTH = 300  # シグネチャの生成に用いる文字列の最大長


class TargetType(Enum):
    HTML = 3
    MAIL = 4


def convert_to_hexstring(text: str) -> str:
    text = text[:MAX_SIG_STR_LENGTH]
    return "".join(["{:02x}".format(ord(c)) for c in text])


def convert_url_to_hexstring(url: str) -> str:
    parsed = urlparse(url)
    return convert_to_hexstring(f"{parsed.netloc}{parsed.path}")


def convert_domain_to_hexstring(domain: str) -> str:
    return convert_to_hexstring(domain)


def format_phishing_url_signature(
    sig_id: str, target_type: TargetType, offset: str, hexsig: str
) -> str:
    return f"CSC.Phishing.url.{sig_id}:{target_type.value}:{offset}:{hexsig}"


def format_phishing_domain_signature(
    sig_id: str, target_type: TargetType, offset: str, hexsig: str
) -> str:
    return f"CSC.Phishing.domain.{sig_id}:{target_type.value}:{offset}:{hexsig}"


def make_phishing_links_db(input_filepath: str, output_filepath: str):
    hexsigs = set()
    with open(input_filepath, "r") as fin:
        while True:
            line = fin.readline()
            if not line:
                break
            line = line.strip()
            hexsig = convert_url_to_hexstring(line)
            hexsigs.add(hexsig)
    with open(output_filepath, "w") as fout:
        sigid = 0
        for hexsig in sorted(hexsigs):
            sightml = format_phishing_url_signature(
                str(sigid), TargetType.HTML, "*", hexsig
            )
            fout.write(sightml + "\n")
            sigid += 1

            sigmail = format_phishing_url_signature(
                str(sigid), TargetType.MAIL, "*", hexsig
            )
            fout.write(sigmail + "\n")
            sigid += 1


def make_phishing_domains_db(input_filepath: str, output_filepath: str):
    hexsigs = set()
    with open(input_filepath, "r") as fin:
        while True:
            line = fin.readline()
            if not line:
                break
            line = line.strip()
            hexsig = convert_domain_to_hexstring(line)
            hexsigs.add(hexsig)
    with open(output_filepath, "w") as fout:
        sigid = 0
        for hexsig in sorted(hexsigs):
            sightml = format_phishing_domain_signature(
                str(sigid), TargetType.HTML, "*", hexsig
            )
            fout.write(sightml + "\n")
            sigid += 1

            sigmail = format_phishing_domain_signature(
                str(sigid), TargetType.MAIL, "*", hexsig
            )
            fout.write(sigmail + "\n")
            sigid += 1


def main(args):
    if args.phishing_links:
        make_phishing_links_db(args.phishing_links, args.output)
    if args.phishing_domains:
        make_phishing_domains_db(args.phishing_domains, args.output)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Custom signature database maker for ClamAV"
    )
    parser.add_argument(
        "--phishing-links",
        dest="phishing_links",
        type=str,
        help="Path of a phishing links file",
    )
    parser.add_argument(
        "--phishing-domains",
        dest="phishing_domains",
        type=str,
        help="Path of a phishing domains file",
    )
    parser.add_argument(
        "--output",
        dest="output",
        type=str,
        required=True,
        help="Path of an output database file",
    )
    args = parser.parse_args()
    main(args)
